Index: whoriend/mainApp/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\nfrom django.db.models.deletion import CASCADE\r\nfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager\r\nfrom django.db.models.fields import CharField, IntegerField\r\nfrom django.contrib.auth.models import PermissionsMixin\r\nfrom django.core.validators import MinValueValidator, MaxValueValidator\r\n# Create your models here.\r\n# Database의 형태를 보여줌\r\n\r\n\r\n# Model은 필드를 갖고있음 ex) 텍스트필드, 이메일필드 등등\r\nclass UserManager(BaseUserManager):\r\n    def create_user(self, email, date_of_birth, password=None, **extra_fields):\r\n        if not email:\r\n            raise ValueError('Users must have an email address')\r\n\r\n        user = self.model(\r\n            email=self.normalize_email(email),\r\n            date_of_birth=date_of_birth,\r\n            **extra_fields\r\n        )\r\n        user.set_password(password)\r\n        user.save(using=self._db)\r\n        return user\r\n\r\n    def create_superuser(self, email, date_of_birth, password):\r\n        user = self.create_user(\r\n            email,\r\n            password=password,\r\n            date_of_birth=date_of_birth,\r\n        )\r\n        user.is_admin = True\r\n        user.save(using=self._db)\r\n        return user\r\n\r\nclass User(AbstractBaseUser, PermissionsMixin):\r\n    GENDER_MALE = \"male\"\r\n    GENDER_FEMALE = \"female\"\r\n  \r\n    GENDER_CHOICES = (\r\n        (GENDER_MALE, \"Male\"),\r\n        (GENDER_FEMALE, \"Female\"),\r\n    )\r\n    \r\n    COUNTRY_KO = \"korea\"\r\n    COUNTRY_EN = \"America\"\r\n    COUNTRY_JA = \"Japan\"\r\n    COUNTRY_CH = \"China\"\r\n    \r\n    COUNTRY_CHOICES = (\r\n        (COUNTRY_KO ,\"korea\"),\r\n        ( COUNTRY_EN, \"America\"),\r\n        ( COUNTRY_JA, \"Japan\"),\r\n        ( COUNTRY_CH, \"China\"),\r\n    \r\n    )\r\n    email = models.EmailField(\r\n        verbose_name='email',\r\n        max_length=255,\r\n        unique=True,\r\n    )\r\n    date_of_birth = models.DateField()\r\n    is_active = models.BooleanField(default=True)\r\n    is_admin = models.BooleanField(default=False)\r\n    \r\n    name = models.CharField(max_length=100, blank=False, default=\"\")\r\n    nickname = models.CharField(max_length=10, blank=False, unique=True, default=\"\")\r\n    gender = models.CharField(choices=GENDER_CHOICES, max_length=10, default=GENDER_FEMALE)\r\n    age = models.IntegerField(default=20, null=True)\r\n    country = models.CharField(choices=COUNTRY_CHOICES, max_length=20, blank=False, default=\"\")\r\n    interest = models.ManyToManyField(\"Category\") \r\n    objects = UserManager()\r\n    image = models.ImageField(null = True) #프로필 사진\r\n\r\n    USERNAME_FIELD = 'email'\r\n    REQUIRED_FIELDS = ['date_of_birth']\r\n\r\n    def __str__(self):\r\n        return self.email\r\n\r\n    def has_perm(self, perm, obj=None):\r\n        return True\r\n\r\n    def has_module_perms(self, app_label):\r\n        return True\r\n\r\n    @property\r\n    def is_staff(self):\r\n        return self.is_admin\r\n    \r\n    \r\nclass Review(models.Model):\r\n    review = models.TextField(null = True,blank=True)\r\n    time = models.IntegerField(null = True,validators=[MinValueValidator(1), MaxValueValidator(5)])\r\n    good_teach = models.IntegerField(null = True,validators=[MinValueValidator(1), MaxValueValidator(5)])\r\n    kind = models.IntegerField(null = True,validators=[MinValueValidator(1), MaxValueValidator(5)])\r\n    user = models.ForeignKey(\"User\", related_name=\"reviews\", on_delete=CASCADE)\r\n\r\n\r\n# Create your models here.\r\n\r\nclass Category(models.Model):\r\n    \"\"\"category model definition\"\"\"\r\n    name = models.CharField(max_length=30, null = True, unique=True)\r\n    id = models.AutoField\r\n    \r\n    def __str__(self):\r\n        return self.name\r\n\r\nclass Detail_Category(models.Model):\r\n    category_name = models.ForeignKey(Category,db_column='name', on_delete=CASCADE)\r\n    detail_name = models.CharField(max_length=30, default=\"\")\r\n    image = models.ImageField(null = True)\r\n\r\n    def __str__(self):\r\n        return self.detail_name\r\n    \r\nclass Community(models.Model):\r\n    username = models.ForeignKey(User)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/whoriend/mainApp/models.py b/whoriend/mainApp/models.py
--- a/whoriend/mainApp/models.py	(revision 5ad7a190aa3ad9e3bf3b513722909f1d5df22691)
+++ b/whoriend/mainApp/models.py	(date 1637472278941)
@@ -116,4 +116,4 @@
         return self.detail_name
     
 class Community(models.Model):
-    username = models.ForeignKey(User)
\ No newline at end of file
+    username = models.ForeignKey(User,on_delete=CASCADE)
\ No newline at end of file
Index: whoriend/mainApp/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\nfrom .import views\r\n\r\napp_name = \"mainApp\"\r\n\r\nurlpatterns = [\r\n    path(\"\", views.mainView.as_view()),\r\n    path(\"언어/\", views.TeachableUserView),\r\n    path(\"/login\",views.login()),\r\n    path(\"/logout\",views.login()),\r\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/whoriend/mainApp/urls.py b/whoriend/mainApp/urls.py
--- a/whoriend/mainApp/urls.py	(revision 5ad7a190aa3ad9e3bf3b513722909f1d5df22691)
+++ b/whoriend/mainApp/urls.py	(date 1637474764177)
@@ -5,7 +5,7 @@
 
 urlpatterns = [
     path("", views.mainView.as_view()),
-    path("언어/", views.TeachableUserView),
-    path("/login",views.login()),
-    path("/logout",views.login()),
+    path("언어/", views.TeachableUserView, name="language"),
+    path("login/",views.login),
+    path("logout/",views.logout),
 ]
\ No newline at end of file
Index: whoriend/mainApp/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nfrom django.http import response\r\nfrom rest_framework.decorators import api_view\r\nfrom rest_framework.response import Response\r\nfrom django.http.response import JsonResponse\r\nfrom django.shortcuts import render\r\nfrom rest_framework.generics import *\r\nfrom rest_framework.serializers import Serializer\r\nfrom rest_framework.views import APIView\r\nfrom .serializers import *\r\nfrom .models import *\r\n# Create your views here.\r\n\r\nclass mainView(ListAPIView):\r\n    queryset = Detail_Category.objects.all()\r\n    serializer_class = DetailCategorySerializer\r\n\r\n\r\ndef TeachableUserView(request):\r\n    print('hello')\r\n    if request == 'GET':\r\n        #data = json.loads(request.body)\r\n        #category = data['category']\r\n        category = '언어'\r\n        queryset = User.objects.filter(interest__category_name = category) #json형식으로 받은 카테고리만 걸러서 리턴\r\n        serializers = TeachableUserSerializer(queryset)\r\n        #context = {\"result\" : queryset}\r\n        return Response(serializers)\r\n\r\ndef login(request):\r\n    if request.method == 'POST':\r\n        data = JSONParser().parse(request)\r\n        email = data['email']\r\n        password = data['password']\r\n        user = authenticate(email=email, password=password)\r\n        if user is not None:\r\n            login(request, user) #session 에 login 정보 저장.\r\n            return Response(status=200)\r\n        else:\r\n            return Response(status=400)\r\n\r\ndef logout(request):\r\n    if request.user.is_authenticated: # 로그인이 완료 됬다면.\r\n        return Response(status=200)\r\n    else:\r\n        return Response(status=400)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/whoriend/mainApp/views.py b/whoriend/mainApp/views.py
--- a/whoriend/mainApp/views.py	(revision 5ad7a190aa3ad9e3bf3b513722909f1d5df22691)
+++ b/whoriend/mainApp/views.py	(date 1637475899295)
@@ -1,9 +1,12 @@
 import json
+
+from django.contrib.auth import authenticate
 from django.http import response
 from rest_framework.decorators import api_view
+from rest_framework.parsers import JSONParser
 from rest_framework.response import Response
 from django.http.response import JsonResponse
-from django.shortcuts import render
+from django.shortcuts import render, redirect
 from rest_framework.generics import *
 from rest_framework.serializers import Serializer
 from rest_framework.views import APIView
@@ -16,8 +19,9 @@
     serializer_class = DetailCategorySerializer
 
 
-def TeachableUserView(request):
+def TeachableUserView(request,data):
     print('hello')
+    print(data)
     if request == 'GET':
         #data = json.loads(request.body)
         #category = data['category']
@@ -32,12 +36,24 @@
         data = JSONParser().parse(request)
         email = data['email']
         password = data['password']
-        user = authenticate(email=email, password=password)
+        user = authenticate(email='ata97@naver.com', password='1234')
         if user is not None:
+            print(1)
             login(request, user) #session 에 login 정보 저장.
-            return Response(status=200)
+            serializers = BasicUserSerializer(user)
+            return redirect('language/', serializers.data)
+               # Redirect(serializers.data, status=200)
         else:
-            return Response(status=400)
+            return Http404("Question does not exist")
+    if request.method == 'GET':
+        user = User.objects.filter(email='junic@naver.com')
+        serializers = BasicUserSerializer(user)
+        redirect('언어/', serializers.data)
+    user = User.objects.filter(email='junic@naver.com')
+    serializers = BasicUserSerializer(user)
+    return redirect('mainApp:language')
+
+
 
 def logout(request):
     if request.user.is_authenticated: # 로그인이 완료 됬다면.
Index: whoriend/mainApp/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\nfrom .models import *\r\n\r\nclass DetailCategorySerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Detail_Category\r\n        fields = (\"category_name\", \"detail_name\", \"image\")\r\n\r\nclass TeachableUserSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = User\r\n        fields = (\"nickname\", \"gender\", \"image\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/whoriend/mainApp/serializers.py b/whoriend/mainApp/serializers.py
--- a/whoriend/mainApp/serializers.py	(revision 5ad7a190aa3ad9e3bf3b513722909f1d5df22691)
+++ b/whoriend/mainApp/serializers.py	(date 1637475341627)
@@ -1,12 +1,20 @@
 from rest_framework import serializers
 from .models import *
 
+
 class DetailCategorySerializer(serializers.ModelSerializer):
     class Meta:
         model = Detail_Category
         fields = ("category_name", "detail_name", "image")
 
+
 class TeachableUserSerializer(serializers.ModelSerializer):
     class Meta:
         model = User
-        fields = ("nickname", "gender", "image")
\ No newline at end of file
+        fields = ("nickname", "gender", "image")
+
+
+class BasicUserSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = User
+        fields = ( "name", "image")
\ No newline at end of file
Index: .idea/whoreindGit.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/whoreindGit.iml b/.idea/whoreindGit.iml
--- a/.idea/whoreindGit.iml	(revision 5ad7a190aa3ad9e3bf3b513722909f1d5df22691)
+++ b/.idea/whoreindGit.iml	(date 1637472155224)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.8 (whoriendLocal)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"96e954e6-618c-43bb-b9eb-d906a613229d\" name=\"Default Changelist\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/whoriend/mainApp/models.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/whoriend/mainApp/models.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/whoriend/mainApp/views.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/whoriend/mainApp/views.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"21DAps380mYGk080hmZEVbnXEwS\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/whoriend\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"96e954e6-618c-43bb-b9eb-d906a613229d\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1637465470222</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1637465470222</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5ad7a190aa3ad9e3bf3b513722909f1d5df22691)
+++ b/.idea/workspace.xml	(date 1637472673831)
@@ -2,7 +2,11 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="96e954e6-618c-43bb-b9eb-d906a613229d" name="Default Changelist" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/whoreindGit.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/whoreindGit.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/whoriend/mainApp/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/whoriend/mainApp/models.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/whoriend/mainApp/serializers.py" beforeDir="false" afterPath="$PROJECT_DIR$/whoriend/mainApp/serializers.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/whoriend/mainApp/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/whoriend/mainApp/urls.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/whoriend/mainApp/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/whoriend/mainApp/views.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -21,7 +25,36 @@
   <component name="PropertiesComponent">
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/whoriend" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/Pipfile" />
+    <property name="settings.editor.selected.configurable" value="com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable" />
+  </component>
+  <component name="RunManager">
+    <configuration name="views" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="whoreindGit" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="C:\Users\ata97\anaconda3\envs\djangoTest\python.exe" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/whoriend/mainApp" />
+      <option name="IS_MODULE_SDK" value="false" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/whoriend/mainApp/views.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python.views" />
+      </list>
+    </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
